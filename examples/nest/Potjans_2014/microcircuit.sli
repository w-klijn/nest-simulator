/*
 *  microcircuit.sli
 *
 *  This file is part of NEST.
 *
 *  Copyright (C) 2004 The NEST Initiative
 *
 *  NEST is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  NEST is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with NEST.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

% autorun=true

/*
    Implementation of the multi-layered local cortical network model by

    Potjans, Tobias C. and Diesmann, Markus (2014) The cell-type specific
    cortical microcircuit: relating structure and activity in a full-scale
    spiking network model. Cerebral Cortex. doi:10.1093/cercor/bhs358.

    The script defines and executes the following functions in the given sequence:
    1. CheckParameters
    2. PrepareSimulation
    3. DerivedParameters
    4. CreateNetworkNodes
    5. WriteGIDsToFile
    6. ConnectNetworkNodes

    Please see the file README.txt for details.
*/

% CheckParameters - This function perfoms a (non-exhaustive) check of
% parameter dimensions and values.
%
% In particular, the following is checked:
%   - Is the model of type /iaf_psc_exp?
%   - Do dimensions of the given probablity matrix match
%   - Are the numbers/fractions of neurons to record from
%     compatible with the network size
%
/CheckParameters
{
    neuron_model /iaf_psc_exp eq not {
	Rank 0 eq {
           M_WARNING (CheckParameters)
           (Unexpected neuron type: ) neuron_model cvs join
           (. Script is tuned to /iaf_psc_exp neurons.) join
           message
	} if
    } if

    /vm0_type_options <(original) (optimized)> def
    Vm0_type (original) eq not
    {
        Vm0_type (optimized) eq not
        {

           M_WARNING (CheckParameters)
           (') Vm0_type join
           (' is not a valid option, replacing it with ') join
           vm0_type_options 0 get join
           ('; Valid options are ') join
           vm0_type_options 0 get join
           (' and ') join
           vm0_type_options 1 get join
           (') join
           message

           % reset variable to (original)
           /Vm0_type vm0_type_options 0 get def
        } if
    } if

    /n_layers full_scale_n_neurons length def
    /n_pops_per_layer full_scale_n_neurons Dimensions 1 get def

    conn_probs Dimensions 0 get
    n_layers n_pops_per_layer mul
    eq not {
	M_ERROR (CheckParameters)
	(/conn_probs does not contain /nlayers * /n_pops_per_layer rows)
	message raiseerror
    } if

    conn_probs Dimensions 1 get
    n_layers n_pops_per_layer mul
    eq not  {
	M_ERROR (CheckParameters)
	(/conn_probs does not contain /nlayers * /n_pops_per_layer columns)
	message raiseerror
    } if

    record_fraction_neurons_spikes
    {
        frac_rec_spikes 1 gt
        {
	    M_ERROR (CheckParameters)
	    (/frac_rec_spikes must be between 0 and 1.)
	    message raiseerror
        } if
    }{
        n_rec_spikes full_scale_n_neurons { Min } Map Min area mul gt
        {
	    M_ERROR (CheckParameters)
	    (/n_rec_spikes cannot be larger than the number of neurons in /full_scale_neurons)
	    message raiseerror
        } if
    } ifelse

    record_fraction_neurons_voltage
    {
        frac_rec_voltage 1 gt
        {
	    M_ERROR (CheckParameters)
	    (/frac_rec_voltage must be between 0 and 1.)
	    message raiseerror
        } if
    }{
        n_rec_voltage full_scale_n_neurons { Min } Map Min area mul gt
        {
	    M_ERROR (CheckParameters)
	    (/n_rec_voltage cannot be larger than the number of neurons in /full_scale_neurons)
	    message raiseerror
        } if
    } ifelse

} def


% PrepareSimulation - Set kernel parameters and RNG seeds based on the
% settings in sim_params.sli.
%
/PrepareSimulation
{
    ResetKernel

    % set global kernel parameters
    <<
       /resolution dt
       /total_num_virtual_procs n_vp
       /overwrite_files overwrite_existing_files
       /rng_seeds master_seed [0 n_vp 1 sub] add Range % local RNG seeds
       /grng_seed master_seed n_vp add                 % global RNG seed
       output_path (.) neq {
           /data_path output_path
       } if
    >> SetKernelStatus

    /seed_offset master_seed n_vp add def
    /script_rngs [ n_vp ]
    { seed_offset add rngdict /gsl_mt19937 get exch CreateRNG } Table def
    /normal_rdvs script_rngs { rdevdict /normal get CreateRDV } Map def

} def


% DerivedParameters - Compute derived parameters from the ones given
% in network_params.sli.
%
/DerivedParameters
{
    % compute numbers of neurons for the given surface area
    /n_neurons
    full_scale_n_neurons { area mul cvi } [2] Map
    def

    % compute PSC amplitude from PSP amplitude

    model_params using
    % factor for transforming PSP amplitude to PSC amplitude

    /re tau_m tau_syn_ex div def
    /de tau_syn_ex tau_m sub def
    /ri tau_m tau_syn_in div def
    /di tau_syn_in tau_m sub def

    /PSC_e_over_PSP_e
    (((C_m)^(-1)*tau_m*tau_syn_ex/de*(re^(tau_m/de)-re^(tau_syn_ex/de)))^(-1))
    ExecMath def

    /PSC_i_over_PSP_i
    (((C_m)^(-1)*tau_m*tau_syn_in/di*(ri^(tau_m/di)-ri^(tau_syn_in/di)))^(-1))
    ExecMath def
    endusing

    /PSC_e PSC_e_over_PSP_e PSP_e mul def
    /PSC_e_23_4 PSC_e_over_PSP_e PSP_e_23_4 mul def
    /PSP_i PSP_e g mul def
    /PSC_i PSC_i_over_PSP_i PSP_i mul def

    % PSC amplitude for all external input
    /PSC_ext PSC_e_over_PSP_e PSP_ext mul def

    % array of synaptic current amplitudes
    [4 2 4] [PSC_e PSC_i] LayoutArray /PSC_array Set
    PSC_array [0 0 1 0]  PSC_e_23_4 put /PSC_array Set

    % standard deviations of synaptic current amplitudes
    /PSC_sd [PSC_e PSC_i] PSC_rel_sd mul def
    /PSC_th_sd PSC_ext PSC_rel_sd mul def

    % standard deviations of delays
    /delays_sd delays delay_rel_sd mul def
    /delay_th_sd delay_th delay_th_rel_sd mul def

    % numbers of neurons from which to record spikes and membrane potentials
    record_fraction_neurons_spikes
    {
        /n_neurons_rec_spikes
        n_neurons{ frac_rec_spikes mul cvi } [2] Map
        def
    }{
        /n_neurons_rec_spikes
        [n_layers n_pops_per_layer] n_rec_spikes LayoutArray
        def
    } ifelse

    record_fraction_neurons_voltage
    {
        /n_neurons_rec_voltage
        n_neurons{ frac_rec_voltage mul cvi } [2] Map
        def
    }{
        /n_neurons_rec_voltage
        [n_layers n_pops_per_layer] n_rec_voltage LayoutArray
        def
    } ifelse

} def


% the following variables are created here:
% neuron_GIDs
% poisson_GIDs
% dc_generator_GIDs
% spike_detector_GIDs
% voltmeter_GIDs
% th_neuron_GIDs
% th_poisson_GID
% th_spike_detector_GID
/CreateNetworkNodes
{
    /spikes_record_to          save_cortical_spikes {/ascii}{/memory} ifelse def
    /voltages_record_to        save_voltages        {/ascii}{/memory} ifelse def
    /thalamic_spikes_record_to save_thalamic_spikes {/ascii}{/memory} ifelse def 

    neuron_model model_params SetDefaults
    % arrays of GIDs:
    /neuron_GIDs         [n_layers n_pops_per_layer] 0 LayoutArray def
    /spike_detector_GIDs [n_layers n_pops_per_layer] 0 LayoutArray def
    /voltmeter_GIDs      [n_layers n_pops_per_layer] 0 LayoutArray def
    /poisson_GIDs        [n_layers n_pops_per_layer] 0 LayoutArray def
    /dc_generator_GIDs   [n_layers n_pops_per_layer] 0 LayoutArray def

    0 1 n_layers 1 sub {
        /layer_index Set

        0 1 n_pops_per_layer 1 sub {
            /population_index Set

	    % create the neurons
	    neuron_model % what model
	    n_neurons layer_index get population_index get % how many
	    Create /population Set

	    % store the GIDCollection
            neuron_GIDs [layer_index population_index] % the position
	    population put /neuron_GIDs Set

            % initialize membrane potentials
            population {
               dup /vp get /node_vp Set
               Vm0_type (optimized) eq
               {
                   <<
                      /V_m normal_rdvs node_vp get Random
                      Vm0_std layer_index get population_index get mul
                      Vm0_mean layer_index get population_index get add
                   >>
               }{
                   <<
                      /V_m normal_rdvs node_vp get Random
                      Vm0_std mul Vm0_mean add
                   >>
               } ifelse
               SetStatus
	    } forall

            spike_detector_GIDs [layer_index population_index] /spike_detector <<
	       /label spike_detector_label layer_index cvs join (_) join population_index cvs join
	       /record_to spikes_record_to
	    >> Create put /spike_detector_GIDs Set

	    voltmeter_GIDs [layer_index population_index] /voltmeter <<
	       /label voltmeter_label layer_index cvs join (_) join population_index cvs join
	       /record_to voltages_record_to
	    >> Create put /voltmeter_GIDs Set

	    K_bg layer_index get population_index get /K_bg_ Set

	    poisson_GIDs [layer_index population_index] /poisson_generator <<
	       /rate K_bg_ bg_rate mul
            >> Create put /poisson_GIDs Set

	    dc_generator_GIDs [layer_index population_index] /dc_generator <<
	       /amplitude K_bg_ dc_amplitude mul
	    >>  Create put /dc_generator_GIDs Set

        } for % loop over e and i populations
    } for % loop over layers

    % create and configure thalamic neurons (parrots) and their Poisson inputs
    n_thal 0 gt {
        /parrot_neuron n_thal Create /th_neuron_GIDs Set

	/poisson_generator <<
           /rate th_rate
           /start th_start
           /stop th_start th_duration add
        >> Create /th_poisson_GID Set

        save_thalamic_spikes {
            /spike_detector Create <<
	       /label th_spike_detector_label
	       /record_to thalamic_spikes_record_to
	    >> /th_spike_detector_GID Set
        } if
    } if
} def


% WriteGIDsToFile - Save the GIDs of the neurons to a file based on
% the parameters given in sim_params.sli.
%
/WriteGIDsToFile
{
    Rank 0 eq {

    	GetKernelStatus /data_path get empty not {
            (/) join
        } if

	GID_filename join
	(w) ofsopen ;

	neuron_GIDs Flatten {
            /GIDs Set
            GIDs Min <- (\t) <- GIDs Max <- (\n) <-
	} forall

close
    } if
} def

% ConnectNetworkNodes - Connect the network nodes created in
% CreateNetworkNodes based on the probabilities defined in
% network_params.sli.
%
/ConnectNetworkNodes
{
    tic

    0 1 n_layers 1 sub { % target layer
        /target_layer Set

        0 1 n_pops_per_layer 1 sub { % target population
	    /target_pop Set

            % get neuron IDs
            neuron_GIDs target_layer get target_pop get /target_nodes Set

            n_neurons target_layer get target_pop get /n_targets Set
            full_scale_n_neurons target_layer get target_pop get /full_scale_n_targets Set

	    0 1 n_layers 1 sub { % source layer
	        /source_layer Set

	        0 1 n_pops_per_layer 1 sub { % source population
		    /source_pop Set

		    % local connections

		    % get neuron IDs
                    neuron_GIDs source_layer get source_pop get /source_nodes Set

                    n_neurons source_layer get source_pop get /n_sources Set
                    full_scale_n_neurons source_layer get source_pop get /full_scale_n_sources Set

                    % get connection probability
		    conn_probs
		    % pick row (target) in conn_probs
		    target_layer n_pops_per_layer mul target_pop add get
		    % pick column (source) in conn_probs
		    source_layer n_pops_per_layer mul source_pop add get
		    /conn_prob Set % probability for this connection

                    % Compute numbers of synapses assuming binomial degree
                    % distributions and allowing for multapses (see Potjans
                    % and Diesmann 2012 Cereb Cortex Eq. 1)
                    preserve_K {
                        full_scale_n_sources full_scale_n_targets mul /prod Set
                        ( log(1.-conn_prob)/log((prod-1.)/prod) ) ExecMath /n_syn_temp Set
                        n_syn_temp n_targets mul full_scale_n_targets div
                    }{
                        n_sources n_targets mul /prod Set
                        ( log(1.-conn_prob)/log((prod-1.)/prod) ) ExecMath
                    } ifelse
                    cvi /n_synapses Set

                    n_synapses 0 gt {
                        PSC_array target_layer get target_pop get source_layer
                        get source_pop get /mean_weight Set

                        % fill the weight dictionary for Connect and insert it into the synapse dictionary
                        mean_weight 0 gt {
                          weight_dict_exc /mu mean_weight put
                          weight_dict_exc /sigma PSC_sd source_pop get abs put
                          syn_dict /weight weight_dict_exc put
                        }{
                          weight_dict_inh /mu mean_weight put
                          weight_dict_inh /sigma PSC_sd source_pop get abs put
                          syn_dict /weight weight_dict_inh put
                        } ifelse

			% fill the delay dictionary for Connect and insert it into the synapse dictionary
                        delay_dict /mu delays source_pop get put
                        delay_dict /sigma delays_sd source_pop get abs put
                        syn_dict /delay delay_dict put

			% fill the connectivity dictionary with the number of synapses to be used
                        conn_dict /N n_synapses put
                        conn_dict /rule /fixed_total_number put

                        % Connect the populations
                        source_nodes target_nodes conn_dict syn_dict Connect

                    } if % n_synapses > 0
	        } for % source population
	    } for % source layer

            n_thal 0 gt
            {
                % connections from thalamic neurons

                C_th target_layer get target_pop get /conn_prob Set

                % Compute numbers of synapses assuming binomial degree
                % distributions and allowing for multapses (see Potjans and
                % Diesmann 2012 Cereb Cortex Eq. 1)
                preserve_K {
                    /prod n_thal full_scale_n_targets mul def
                    ( log(1.-conn_prob)/log((prod-1.)/prod) ) ExecMath /n_syn_temp Set
                    n_syn_temp n_targets mul full_scale_n_targets div
                }{
                    /prod n_thal n_targets mul def
                    ( log(1.-conn_prob)/log((prod-1.)/prod) ) ExecMath
                } ifelse
                cvi /n_synapses Set

                n_synapses 0 gt {
                    % fill the weight dictionary for Connect
                    weight_dict_exc /mu PSC_ext put
                    weight_dict_exc /sigma PSC_th_sd abs put

                    % insert the weight dictionary into the synapse dictionary
                    syn_dict /weight weight_dict_exc put

                    % fill the delay dictionary for Connect
                    delay_dict /mu delay_th put
                    delay_dict /sigma delay_th_sd abs put

                    % insert the delay dictionary into the synapse dictionary
                    syn_dict /delay delay_dict put

		    % fill the connectivity dictionary with the number of synapses to be used
                    conn_dict /N n_synapses put
                    conn_dict /rule /fixed_total_number put

                    % Connect the thalamus
                    th_neuron_GIDs target_nodes conn_dict syn_dict Connect

                } if % n_synapses > 0
            } if % n_thal > 0

            % Connect devices

            % Connect to the spike detector
            % record from a continuous range of IDs (appropriate for networks without topology)
            target_nodes n_neurons_rec_spikes target_layer get target_pop get Take
            spike_detector_GIDs target_layer get target_pop get
            /all_to_all
	    Connect

            % Connect to the voltmeter
            voltmeter_GIDs target_layer get target_pop get
            % record from a continuous range of IDs
            target_nodes n_neurons_rec_voltage target_layer get target_pop get Take
            /all_to_all
	    Connect

            % Connect to the Poisson generators
            poisson_GIDs target_layer get target_pop get
            target_nodes
            /all_to_all
            << /weight PSC_ext /delay delays 0 get >>
            Connect

            % Connect to the DC generators
            dc_generator_GIDs target_layer get target_pop get
            target_nodes
            /all_to_all
            Connect

        } for % target population
    } for % target layer

    n_thal 0 gt {
        % Connect thalamic poisson_generator to thalamic neurons (parrots)
        th_poisson_GID 1 arraystore
        th_neuron_GIDs
        Connect
    } if

    record_thalamic_spikes n_thal 0 gt and {
        % Connect thalamic neurons to spike detector
        th_neuron_GIDs
        th_spike_detector_GID 1 arraystore
        Connect
    } if

    toc /ConnectTime Set
} def


% load parameters
(sim_params) run
(network_params) run

% execute functions
CheckParameters
PrepareSimulation
DerivedParameters
CreateNetworkNodes
WriteGIDsToFile
ConnectNetworkNodes

tic
  t_sim Simulate
toc /SimTime Set

Rank 0 eq {
    (Connecting took ) ConnectTime cvs join ( s\n) join
    (Simulating took ) join SimTime cvs join ( s) join
    M_INFO
    message
} if
