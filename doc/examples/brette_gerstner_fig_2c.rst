.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_brette_gerstner_fig_2c.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_brette_gerstner_fig_2c.py:

Testing the adapting exponential integrate and fire model in NEST (Brette and Gerstner Fig 2C)
----------------------------------------------------------------------------------------------------

This example tests the adaptive integrate and fire model (AdEx) according to
Brette and Gerstner [1]_ reproduces Figure 2C of the paper.
Note that Brette and Gerstner give the value for `b` in `nA`.
To be consistent with the other parameters in the equations, `b` must be
converted to `pA` (pico Ampere).

References
~~~~~~~~~~~

.. [1] Brette R and Gerstner W (2005). Adaptive exponential integrate-and-fire model as an effective
       description of neuronal activity J. Neurophysiology. https://doi.org/10.1152/jn.00686.2005



.. code-block:: default



    import nest
    import nest.voltage_trace
    import pylab

    nest.ResetKernel()


First we make sure that the resolution of the simulation is 0.1 ms. This is
important, since the slop of the action potential is very steep.


.. code-block:: default


    res = 0.1
    nest.SetKernelStatus({"resolution": res})
    neuron = nest.Create("aeif_cond_alpha")


`a` and `b` are parameters of the adex model. Their values come from the
publication.


.. code-block:: default



    nest.SetStatus(neuron, {"a": 4.0, "b": 80.5})


Next we define the stimulus protocol. There are two DC generators,
producing stimulus currents during two time-intervals.


.. code-block:: default


    dc = nest.Create("dc_generator", 2)

    nest.SetStatus(dc, [{"amplitude": 500.0, "start": 0.0, "stop": 200.0},
                        {"amplitude": 800.0, "start": 500.0, "stop": 1000.0}])


We connect the DC generators.


.. code-block:: default


    nest.Connect(dc, neuron, 'all_to_all')


And add a ``voltmeter`` to record the membrane potentials.


.. code-block:: default



    voltmeter = nest.Create("voltmeter")


We set the voltmeter to record in small intervals of 0.1 ms and connect the
voltmeter to the neuron.


.. code-block:: default


    nest.SetStatus(voltmeter, {'interval': 0.1})

    nest.Connect(voltmeter, neuron)


Finally, we simulate for 1000 ms and plot a voltage trace to produce the
figure.


.. code-block:: default


    nest.Simulate(1000.0)

    nest.voltage_trace.from_device(voltmeter)
    pylab.axis([0, 1000, -80, -20])


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_brette_gerstner_fig_2c.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: brette_gerstner_fig_2c.py <brette_gerstner_fig_2c.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: brette_gerstner_fig_2c.ipynb <brette_gerstner_fig_2c.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
